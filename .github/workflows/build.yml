name: 🚀 编译 (Build)

on:
  workflow_dispatch:
    inputs:
      owner:
        description: 'ImmortalWrt 仓库的拥有者 (Owner of ImmortalWrt repo)'
        type: string
        required: true
        default: 'immortalwrt'
      repo:
        description: 'ImmortalWrt 仓库的名字 (Name of ImmortalWrt repo)'
        type: string
        required: true
        default: 'immortalwrt'
      branch:
        description: 'ImmortalWrt 仓库的分支 (Branch of ImmortalWrt repo)'
        type: string
        required: true
        default: 'openwrt-24.10'
      multithreading:
        description: '开启多线程编译 (Enable multithreading build)'
        type: boolean
        default: true
      ssh:
        description: '使用 ssh 连接到编译环境 (Connect to the build environment using ssh)'
        type: boolean
        default: false

jobs:
  build:
    if: ${{inputs.ssh == false}}
    runs-on: ubuntu-22.04
    name: 🚀 编译 (Build)
    steps:
      - name: 下载编译所需的依赖 (Install the software packages required for compilation)
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget libelf-dev ecj fastjar java-propose-classpath libpython3-dev python3 python3-dev python3-pip python3-setuptools python3-yaml xsltproc zip

      - name: 克隆当前仓库 (Clone current repo)
        uses: actions/checkout@v4

      - name: 克隆 ImmortalWrt 仓库 (Clone ImmortalWrt repo)
        uses: actions/checkout@v4
        with:
          repository: '${{inputs.owner}}/${{inputs.repo}}'
          ref: ${{inputs.branch}}
          path: ImmortalWrt

      - name: 复制当前仓库的配置文件到 ImmortalWrt 仓库  (Copy current repo config to ImmortalWrt repo)
        run: | 
          cp -f .config feeds.conf.default diy.sh ImmortalWrt/
          cp -rf files ImmortalWrt/

      - name: 运行 diy.sh (Run diy.sh)
        working-directory: ImmortalWrt
        run: |
          chmod +x diy.sh
          ./diy.sh

      - name: 更新并下载 feeds (Update and download feeds)
        working-directory: ImmortalWrt
        run: ./scripts/feeds update -a && ./scripts/feeds install -a

      - name: 再次复制当前仓库的配置文件到 ImmortalWrt 仓库 (Copy current repo config to ImmortalWrt repo again)
        run: cp -f .config feeds.conf.default diy.sh ImmortalWrt/

      - name: 编译前上传配置 (Upload config before build)
        uses: actions/upload-artifact@v4
        with:
          name: config-before-build
          path: |
            ImmortalWrt/feeds.conf.default
            ImmortalWrt/.config

      - name: 多线程编译 ImmortalWrt (Build ImmortalWrt multithreading)
        if: ${{inputs.multithreading == true}}
        working-directory: ImmortalWrt
        run: make -j$(nproc) V=s

      - name: 单线程编译 ImmortalWrt (Build ImmortalWrt single thread)
        if: ${{inputs.multithreading == false}}
        working-directory: ImmortalWrt
        run: make -j1 V=s

      - name: 上传编译结果到 Artifact (Upload build result to Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: ImmortalWrt-build-result
          path: ImmortalWrt/bin/targets

  build-ssh:
    if: ${{inputs.ssh == true}}
    name: 🚀 编译 (Build) - SSH
    runs-on: ubuntu-22.04
    steps:
      - name: 下载编译所需的依赖 (Install the software packages required for compilation)
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget libelf-dev ecj fastjar java-propose-classpath libpython3-dev python3 python3-dev python3-pip python3-setuptools python3-yaml xsltproc zip

      - name: 克隆当前仓库 (Clone current repo)
        uses: actions/checkout@v4

      - name: 克隆 ImmortalWrt 仓库 (Clone ImmortalWrt repo)
        uses: actions/checkout@v4
        with:
          repository: '${{inputs.owner}}/${{inputs.repo}}'
          ref: ${{inputs.branch}}
          path: ImmortalWrt

      - name: 开启 SSH 服务 (Start SSH service)
        uses: lhotari/action-upterm@v1
        with:
          wait-timeout-minutes: 20

      - name: 编译前上传配置 (Upload config before build)
        uses: actions/upload-artifact@v4
        with:
          name: config-before-build
          path: |
            ImmortalWrt/feeds.conf.default
            ImmortalWrt/.config

      - name: 多线程编译 ImmortalWrt (Build ImmortalWrt multithreading)
        if: ${{inputs.multithreading == true}}
        working-directory: ImmortalWrt
        run: make -j$(nproc) V=s

      - name: 单线程编译 ImmortalWrt (Build ImmortalWrt single thread)
        if: ${{inputs.multithreading == false}}
        working-directory: ImmortalWrt
        run: make -j1 V=s

      - name: 上传编译结果到 Artifact (Upload build result to Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: ImmortalWrt-build-result
          path: ImmortalWrt/bin/targets
